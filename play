#!/bin/bash
# https://github.com/BelkaDev/mustream 
# Requires a running Spotify desktop client

check::network() { 
  [[ $? != 0 ]] && echo "Network error: couldn't reach server." && exit 1
}

check::running() {
[[ -z $(pidof -s spotify) ]] && echo "Spotify is not running." && exit 1
}

_http_request() {
user_agent="User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36"
header=$(echo "User-Agent: $user_agent" \
 echo "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
 echo "Accept-Language: en-US,en;q=0.5" \
 echo "Upgrade-Insecure-Requests: 1" \
 echo "Connection: keep-alive")
 curl -s "$1" -H "$header" --compressed 
}

_fetch_metadata() {
parameter="$1"
echo "$result" |  grep -Eo "meta property=\"og:$parameter\".*?" | grep -oh -P '(?<=content=\").*' | awk -F "\" />" '{print $1}'
}

_format_output() {
  artist=" $(echo "$1" | awk -F "路"  '{print $1}')路"
  [[ $type == "playlist" ]] && artist="" # hides the playlist author name
  item="$2"
  echo "$artist $item."
  echo "Details:$(echo "$1" | awk -F "路"  '{$1="";print $0 }')" | sed -e 's/\s\+/ 路 /2g'
}
 
check::running
type=track # default
engine=https://www.google.com

###### Parsing arguments ######
if [[ ${1^^} =~ ^(-A|--ALBUM|ALBUM)$ ]]; then
type=album && shift
elif [[ ${1^^} =~ ^(-P|--PLAYLIST|PLAYLIST|SOME)$ ]]; then
type=playlist && shift
fi
if [[ $* == *"open.spotify.com/playlist/"* ]]; then
type=playlist
key=$(echo $* | sed 's:.*/::' | cut -c 1-22)
else

###### Preparing request ######
qurl=$engine"/search?hl=en&q=$(echo $* | sed 's/ /+/g')"+"site:open.spotify.com/"$type

###### Fetching key ######
dom=`_http_request $qurl`
key=$(echo "$dom" | \
  grep -o '<a href=['"'"'"][^"'"'"']*['"'"'"]' | \
  sed -e 's/^<a href=["'"'"']//' -e 's/["'"'"']$//'  | \
  grep -i 'open.spotify.com/'$type/ | \
  grep -i 'https'  -m 1  | \
  sed 's:.*/::' | \
  cut -c 1-22)
  check::network
fi

###### Generating link ######
link=https://open.spotify.com/$type/$key
result=`_http_request $link`
check::network
[[ $(echo "$result" | grep -m 1 -o "error") = "error" || 
  $(echo "$result" | grep -m 1 -o "Moved Permanently") = "Moved Permanently" ]] &&
      echo "Nothing found." && exit 1

###### Sending D-Bus Event ######
dbus-send  --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.OpenUri string:spotify:$type:$key &>/dev/null

###### Output ######
echo "Playing: $(_format_output "$(_fetch_metadata "description")" "$(_fetch_metadata "title")")"  
[[ $type = "playlist" ]] && echo "Url: $link"

###### Exiting ######
exit 0
